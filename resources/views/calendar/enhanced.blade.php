@extends('layouts.app')

@section('title', 'Calendar Management')
@section('page-title', 'Calendar Management')

@section('content')
<div class="container-fluid">
    <!-- Calendar Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center">
                    <h2 class="mb-0 me-3">Calendar</h2>
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-outline-primary active" id="monthViewBtn" onclick="switchView('month')">Month</button>
                        <button type="button" class="btn btn-outline-primary" id="weekViewBtn" onclick="switchView('week')">Week</button>
                        <button type="button" class="btn btn-outline-primary" id="dayViewBtn" onclick="switchView('day')">Day</button>
                    </div>
                </div>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-secondary" onclick="previousPeriod()">
                        <i class="bi bi-chevron-left"></i>
                    </button>
                    <button class="btn btn-outline-secondary" onclick="nextPeriod()">
                        <i class="bi bi-chevron-right"></i>
                    </button>
                    <button class="btn btn-primary" onclick="showEventModal()">
                        <i class="bi bi-plus"></i> New Event
                    </button>
                    <button class="btn btn-outline-secondary" onclick="refreshCalendar()">
                        <i class="bi bi-arrow-clockwise"></i> Refresh
                    </button>
                    <button class="btn btn-outline-info" onclick="showAnalytics()">
                        <i class="bi bi-graph-up"></i> Analytics
                    </button>
                    <button class="btn btn-outline-success" onclick="connectGoogleCalendar()" id="googleConnectBtn">
                        <i class="bi bi-google"></i> Connect Google
                    </button>
                    <button class="btn btn-outline-warning" onclick="syncGoogleCalendar()" id="googleSyncBtn" style="display: none;">
                        <i class="bi bi-arrow-clockwise"></i> Sync Google
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Calendar Navigation -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="calendar-nav">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="d-flex align-items-center">
                        <h3 id="currentPeriod" class="mb-0 text-primary fw-bold">September 2025</h3>
                        <span class="badge bg-primary ms-3 fs-6">Calendar</span>
                    </div>
                    <div class="d-flex gap-2">
                        <button class="btn btn-outline-primary btn-sm" onclick="goToToday()">
                            <i class="bi bi-calendar-check me-1"></i>Today
                        </button>
                        <button class="btn btn-outline-secondary btn-sm" onclick="refreshCalendar()">
                            <i class="bi bi-arrow-clockwise me-1"></i>Refresh
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Calendar Container -->
    <div class="row">
        <div class="col-12">
            <div class="calendar-container">
                <!-- Month View -->
                <div id="monthView" class="calendar-view">
                    <div class="calendar-grid">
                        <div class="calendar-header">
                            <div class="calendar-day-header">Sun</div>
                            <div class="calendar-day-header">Mon</div>
                            <div class="calendar-day-header">Tue</div>
                            <div class="calendar-day-header">Wed</div>
                            <div class="calendar-day-header">Thu</div>
                            <div class="calendar-day-header">Fri</div>
                            <div class="calendar-day-header">Sat</div>
                        </div>
                        <div class="calendar-days" id="calendarDays">
                            <!-- Days will be generated by JavaScript -->
                        </div>
                    </div>
                </div>

                <!-- Week View -->
                <div id="weekView" class="calendar-view" style="display: none;">
                    <div class="week-grid">
                        <div class="week-header">
                            <div class="week-time-column">Time</div>
                            <div class="week-day-column">Sunday</div>
                            <div class="week-day-column">Monday</div>
                            <div class="week-day-column">Tuesday</div>
                            <div class="week-day-column">Wednesday</div>
                            <div class="week-day-column">Thursday</div>
                            <div class="week-day-column">Friday</div>
                            <div class="week-day-column">Saturday</div>
                        </div>
                        <div class="week-body" id="weekBody">
                            <!-- Week view will be generated by JavaScript -->
                        </div>
                    </div>
                </div>

                <!-- Day View -->
                <div id="dayView" class="calendar-view" style="display: none;">
                    <div class="day-grid">
                        <div class="day-header">
                            <div class="day-time-column">Time</div>
                            <div class="day-events-column" id="dayEventsColumn">
                                <h5 id="dayTitle">Today's Events</h5>
                            </div>
                        </div>
                        <div class="day-body" id="dayBody">
                            <!-- Day view will be generated by JavaScript -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Today's Events Sidebar -->
    <div class="row mt-4">
        <div class="col-md-8">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">
                        <i class="bi bi-calendar-event me-2"></i>Upcoming Events
                    </h5>
                </div>
                <div class="card-body">
                    <div id="upcomingEvents">
                        <!-- Events will be loaded here -->
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card shadow-sm">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">
                        <i class="bi bi-graph-up me-2"></i>Quick Stats
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row text-center">
                        <div class="col-6">
                            <div class="stats-card text-center">
                                <h3 class="text-primary fw-bold" id="todayEventsCount">0</h3>
                                <small class="text-muted">Today's Events</small>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="stats-card text-center">
                                <h3 class="text-success fw-bold" id="weekEventsCount">0</h3>
                                <small class="text-muted">This Week</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Event Modal -->
<div class="modal fade" id="eventModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="eventModalTitle">Create New Event</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="eventForm">
                    @csrf
                    <div class="row">
                        <div class="col-md-8">
                            <div class="mb-3">
                                <label for="eventTitle" class="form-label">Event Title *</label>
                                <input type="text" class="form-control" id="eventTitle" name="title" required>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="eventPriority" class="form-label">Priority</label>
                                <select class="form-select" id="eventPriority" name="priority">
                                    <option value="low">Low</option>
                                    <option value="normal" selected>Normal</option>
                                    <option value="high">High</option>
                                    <option value="urgent">Urgent</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="eventDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="eventDescription" name="description" rows="3"></textarea>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="eventStartDate" class="form-label">Start Date *</label>
                                <input type="date" class="form-control" id="eventStartDate" name="start_date" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="eventEndDate" class="form-label">End Date *</label>
                                <input type="date" class="form-control" id="eventEndDate" name="end_date" required>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="eventStartTime" class="form-label">Start Time</label>
                                <input type="time" class="form-control" id="eventStartTime" name="start_time">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="eventEndTime" class="form-label">End Time</label>
                                <input type="time" class="form-control" id="eventEndTime" name="end_time">
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="eventLocation" class="form-label">Location</label>
                                <input type="text" class="form-control" id="eventLocation" name="location">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="eventType" class="form-label">Event Type</label>
                                <select class="form-select" id="eventType" name="event_type">
                                    <option value="meeting">Meeting</option>
                                    <option value="appointment">Appointment</option>
                                    <option value="deadline">Deadline</option>
                                    <option value="reminder">Reminder</option>
                                    <option value="personal">Personal</option>
                                    <option value="other">Other</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="eventAttendees" class="form-label">Attendees (comma-separated emails)</label>
                        <input type="text" class="form-control" id="eventAttendees" name="attendees" placeholder="john@example.com, jane@example.com">
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="allDayEvent" name="all_day">
                                <label class="form-check-label" for="allDayEvent">
                                    All Day Event
                                </label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="recurringEvent" name="is_recurring">
                                <label class="form-check-label" for="recurringEvent">
                                    Recurring Event
                                </label>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Recurring Options (hidden by default) -->
                    <div id="recurringOptions" style="display: none;" class="mt-3">
                        <div class="row">
                            <div class="col-md-6">
                                <label for="recurrenceType" class="form-label">Repeat</label>
                                <select class="form-select" id="recurrenceType" name="recurrence_type">
                                    <option value="daily">Daily</option>
                                    <option value="weekly">Weekly</option>
                                    <option value="monthly">Monthly</option>
                                    <option value="yearly">Yearly</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label for="recurrenceEnd" class="form-label">End Date</label>
                                <input type="date" class="form-control" id="recurrenceEnd" name="recurrence_end">
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="saveEvent()">Save Event</button>
            </div>
        </div>
    </div>
</div>

<!-- Analytics Modal -->
<div class="modal fade" id="analyticsModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Calendar Analytics</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header">
                                <h6>Meeting Density</h6>
                            </div>
                            <div class="card-body">
                                <canvas id="meetingDensityChart" width="400" height="200"></canvas>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header">
                                <h6>Time Distribution</h6>
                            </div>
                            <div class="card-body">
                                <canvas id="timeDistributionChart" width="400" height="200"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-header">
                                <h6>AI Insights</h6>
                            </div>
                            <div class="card-body">
                                <div id="aiInsights">
                                    <!-- AI insights will be loaded here -->
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
/* Modern Calendar Styling with Bootstrap */
.calendar-container {
    background: white;
    border-radius: 12px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    border: 1px solid #e9ecef;
}

.calendar-grid {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    min-height: 500px;
}

.calendar-header {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
}

.calendar-day-header {
    padding: 16px 12px;
    text-align: center;
    font-weight: 600;
    font-size: 0.9rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    border-right: 1px solid rgba(255, 255, 255, 0.2);
}

.calendar-day-header:last-child {
    border-right: none;
}

.calendar-days {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    min-height: 500px;
}

.calendar-day {
    padding: 12px 8px;
    border-right: 1px solid #e9ecef;
    border-bottom: 1px solid #e9ecef;
    min-height: 80px;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    background: white;
}

.calendar-day:hover {
    background-color: #f8f9fa;
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.calendar-day.other-month {
    color: #adb5bd;
    background-color: #f8f9fa;
}

.calendar-day.today {
    background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
    font-weight: 700;
    color: #1976d2;
    border: 2px solid #2196f3;
}

.calendar-day.today:hover {
    background: linear-gradient(135deg, #bbdefb 0%, #90caf9 100%);
}

.calendar-day.selected {
    background: linear-gradient(135deg, #7b1fa2 0%, #9c27b0 100%);
    color: white;
    font-weight: 600;
}

.calendar-day.has-events {
    background: linear-gradient(135deg, #f3e5f5 0%, #e1bee7 100%);
}

.calendar-day.has-events:hover {
    background: linear-gradient(135deg, #e1bee7 0%, #ce93d8 100%);
}

.day-number {
    font-size: 1.1rem;
    font-weight: 600;
    margin-bottom: 4px;
}

.event-dot {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    display: inline-block;
    margin: 1px 2px;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
}

.event-dot.urgent { 
    background: linear-gradient(135deg, #dc3545, #c82333);
}
.event-dot.high { 
    background: linear-gradient(135deg, #fd7e14, #e55a00);
}
.event-dot.normal { 
    background: linear-gradient(135deg, #198754, #157347);
}
.event-dot.low { 
    background: linear-gradient(135deg, #6c757d, #5a6268);
}

/* Week and Day Views */
.week-grid, .day-grid {
    display: grid;
    border: 1px solid #e9ecef;
    border-radius: 8px;
    overflow: hidden;
}

.week-header, .day-header {
    display: grid;
    grid-template-columns: 100px repeat(7, 1fr);
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
}

.week-time-column, .day-time-column {
    padding: 16px 12px;
    text-align: center;
    font-weight: 600;
    font-size: 0.9rem;
    border-right: 1px solid rgba(255, 255, 255, 0.2);
}

.week-day-column, .day-events-column {
    padding: 16px 12px;
    text-align: center;
    font-weight: 600;
    font-size: 0.9rem;
    border-right: 1px solid rgba(255, 255, 255, 0.2);
}

.week-day-column:last-child, .day-events-column {
    border-right: none;
}

.week-body, .day-body {
    display: grid;
    grid-template-columns: 100px repeat(7, 1fr);
    min-height: 500px;
}

.time-slot {
    padding: 8px 12px;
    border-right: 1px solid #e9ecef;
    border-bottom: 1px solid #e9ecef;
    min-height: 40px;
    font-size: 0.85rem;
    color: #6c757d;
    background: #f8f9fa;
    font-weight: 500;
}

.day-slot {
    padding: 4px;
    border-right: 1px solid #e9ecef;
    border-bottom: 1px solid #e9ecef;
    min-height: 40px;
    position: relative;
    background: white;
}

.day-slot:hover {
    background-color: #f8f9fa;
}

.event-item {
    background: linear-gradient(135deg, #7b1fa2, #9c27b0);
    color: white;
    padding: 4px 8px;
    border-radius: 6px;
    font-size: 0.8rem;
    margin: 2px 0;
    cursor: pointer;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: all 0.2s ease;
}

.event-item:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

.event-item.urgent { 
    background: linear-gradient(135deg, #dc3545, #c82333);
}
.event-item.high { 
    background: linear-gradient(135deg, #fd7e14, #e55a00);
}
.event-item.normal { 
    background: linear-gradient(135deg, #198754, #157347);
}
.event-item.low { 
    background: linear-gradient(135deg, #6c757d, #5a6268);
}

/* Button Styling */
.btn-group .btn.active {
    background: linear-gradient(135deg, #7b1fa2, #9c27b0);
    border-color: #7b1fa2;
    color: white;
    box-shadow: 0 2px 4px rgba(123, 31, 162, 0.3);
}

.btn-group .btn {
    border-radius: 8px;
    font-weight: 500;
    transition: all 0.3s ease;
}

.btn-group .btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

/* Calendar Navigation */
.calendar-nav {
    background: white;
    padding: 20px;
    border-radius: 12px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
}

/* Event Modal Enhancements */
.modal-content {
    border-radius: 12px;
    border: none;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
}

.modal-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border-radius: 12px 12px 0 0;
    border: none;
}

.modal-body {
    padding: 30px;
}

.form-control, .form-select {
    border-radius: 8px;
    border: 2px solid #e9ecef;
    padding: 12px 16px;
    transition: all 0.3s ease;
}

.form-control:focus, .form-select:focus {
    border-color: #7b1fa2;
    box-shadow: 0 0 0 0.2rem rgba(123, 31, 162, 0.25);
}

/* Stats Cards */
.stats-card {
    background: white;
    border-radius: 12px;
    padding: 20px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    border: 1px solid #e9ecef;
    transition: all 0.3s ease;
}

.stats-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 15px rgba(0, 0, 0, 0.15);
}

/* Responsive Design */
@media (max-width: 768px) {
    .calendar-day {
        min-height: 60px;
        padding: 8px 4px;
    }
    
    .calendar-day-header {
        padding: 12px 8px;
        font-size: 0.8rem;
    }
    
    .btn-group .btn {
        padding: 8px 12px;
        font-size: 0.9rem;
    }
}

/* Loading Animation */
.calendar-loading {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 200px;
}

.spinner-border {
    color: #7b1fa2;
}

/* Event Count Badge */
.event-count {
    position: absolute;
    top: 4px;
    right: 4px;
    background: #7b1fa2;
    color: white;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    font-size: 0.7rem;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
}
</style>

<script>
let currentView = 'month';
let currentDate = new Date(2025, 8, 1); // September 2025
let events = [];

// Events will be loaded from database

// Initialize calendar
document.addEventListener('DOMContentLoaded', function() {
    loadCalendarData();
    renderCalendar();
    loadUpcomingEvents();
    setupEventListeners();
    checkGoogleCalendarStatus();
});

function setupEventListeners() {
    // All day event checkbox
    document.getElementById('allDayEvent').addEventListener('change', function() {
        const timeInputs = document.querySelectorAll('#eventStartTime, #eventEndTime');
        timeInputs.forEach(input => {
            input.disabled = this.checked;
            if (this.checked) {
                input.value = '';
            }
        });
    });
    
    // Recurring event checkbox
    document.getElementById('recurringEvent').addEventListener('change', function() {
        const recurringOptions = document.getElementById('recurringOptions');
        recurringOptions.style.display = this.checked ? 'block' : 'none';
    });
}

function loadCalendarData() {
    // Show loading state
    const calendarContainer = document.querySelector('.calendar-container');
    if (calendarContainer) {
        calendarContainer.innerHTML = `
            <div class="calendar-loading">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        `;
    }
    
    // Load events from database via API
    fetch('/api/calendar/events')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                events = data.data.map(event => ({
                    id: event.id,
                    title: event.title,
                    start: new Date(event.start),
                    end: new Date(event.end),
                    priority: event.priority,
                    type: event.event_type,
                    location: event.location,
                    attendees: event.attendees || []
                }));
                renderCalendar();
                loadUpcomingEvents();
            } else {
                console.error('Error loading calendar data:', data.message);
                events = [];
                renderCalendar();
            }
        })
        .catch(error => {
            console.error('Error loading calendar data:', error);
            events = [];
            renderCalendar();
        });
}

function renderCalendar() {
    if (currentView === 'month') {
        renderMonthView();
    } else if (currentView === 'week') {
        renderWeekView();
    } else if (currentView === 'day') {
        renderDayView();
    }
}

function renderMonthView() {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    
    // Update header
    document.getElementById('currentPeriod').textContent = 
        new Date(year, month).toLocaleDateString('en-US', { month: 'long', year: 'numeric' });
    
    // Get first day of month and calculate starting date
    const firstDay = new Date(year, month, 1);
    const startDate = new Date(firstDay);
    startDate.setDate(startDate.getDate() - firstDay.getDay());
    
    const calendarDays = document.getElementById('calendarDays');
    calendarDays.innerHTML = '';
    
    // Generate 42 days (6 weeks)
    for (let i = 0; i < 42; i++) {
        const date = new Date(startDate);
        date.setDate(startDate.getDate() + i);
        
        const dayElement = document.createElement('div');
        dayElement.className = 'calendar-day';
        
        if (date.getMonth() !== month) {
            dayElement.classList.add('other-month');
        }
        
        if (isToday(date)) {
            dayElement.classList.add('today');
        }
        
        // Add day number with Bootstrap styling
        const dayNumber = document.createElement('div');
        dayNumber.className = 'day-number';
        dayNumber.textContent = date.getDate();
        dayElement.appendChild(dayNumber);
        
        // Add events for this day
        const dayEvents = events.filter(event => 
            isSameDay(event.start, date)
        );
        
        if (dayEvents.length > 0) {
            dayElement.classList.add('has-events');
            const eventsContainer = document.createElement('div');
            eventsContainer.className = 'mt-1';
            
            dayEvents.slice(0, 3).forEach(event => {
                const eventDot = document.createElement('span');
                eventDot.className = `event-dot ${event.priority}`;
                eventDot.title = event.title;
                eventsContainer.appendChild(eventDot);
            });
            
            if (dayEvents.length > 3) {
                const moreDot = document.createElement('span');
                moreDot.className = 'event-dot';
                moreDot.textContent = '+';
                moreDot.title = `${dayEvents.length - 3} more events`;
                eventsContainer.appendChild(moreDot);
            }
            
            dayElement.appendChild(eventsContainer);
        }
        
        dayElement.addEventListener('click', () => selectDay(date));
        calendarDays.appendChild(dayElement);
    }
}

function renderWeekView() {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    const date = currentDate.getDate();
    
    // Get start of week (Sunday)
    const startOfWeek = new Date(year, month, date);
    startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay());
    
    // Update header
    const endOfWeek = new Date(startOfWeek);
    endOfWeek.setDate(endOfWeek.getDate() + 6);
    
    document.getElementById('currentPeriod').textContent = 
        `${startOfWeek.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} - ${endOfWeek.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}`;
    
    // Generate time slots (8 AM to 8 PM)
    const weekBody = document.getElementById('weekBody');
    weekBody.innerHTML = '';
    
    for (let hour = 8; hour <= 20; hour++) {
        // Time column
        const timeSlot = document.createElement('div');
        timeSlot.className = 'time-slot';
        timeSlot.textContent = formatHour(hour);
        weekBody.appendChild(timeSlot);
        
        // Day columns
        for (let day = 0; day < 7; day++) {
            const daySlot = document.createElement('div');
            daySlot.className = 'day-slot';
            
            const slotDate = new Date(startOfWeek);
            slotDate.setDate(startOfWeek.getDate() + day);
            slotDate.setHours(hour, 0, 0, 0);
            
            // Add events for this time slot
            const slotEvents = events.filter(event => 
                isSameDay(event.start, slotDate) && 
                event.start.getHours() === hour
            );
            
            slotEvents.forEach(event => {
                const eventElement = document.createElement('div');
                eventElement.className = `event-item ${event.priority}`;
                eventElement.textContent = event.title;
                eventElement.title = `${event.title} - ${formatTime(event.start)}`;
                daySlot.appendChild(eventElement);
            });
            
            weekBody.appendChild(daySlot);
        }
    }
}

function renderDayView() {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    const date = currentDate.getDate();
    
    // Update header
    document.getElementById('currentPeriod').textContent = 
        new Date(year, month, date).toLocaleDateString('en-US', { 
            weekday: 'long', 
            month: 'long', 
            day: 'numeric', 
            year: 'numeric' 
        });
    
    document.getElementById('dayTitle').textContent = 
        new Date(year, month, date).toLocaleDateString('en-US', { 
            weekday: 'long', 
            month: 'long', 
            day: 'numeric' 
        });
    
    // Generate time slots
    const dayBody = document.getElementById('dayBody');
    dayBody.innerHTML = '';
    
    for (let hour = 8; hour <= 20; hour++) {
        // Time column
        const timeSlot = document.createElement('div');
        timeSlot.className = 'time-slot';
        timeSlot.textContent = formatHour(hour);
        dayBody.appendChild(timeSlot);
        
        // Events column
        const daySlot = document.createElement('div');
        daySlot.className = 'day-slot';
        
        const slotDate = new Date(year, month, date, hour, 0, 0, 0);
        
        // Add events for this time slot
        const slotEvents = events.filter(event => 
            isSameDay(event.start, slotDate) && 
            event.start.getHours() === hour
        );
        
        slotEvents.forEach(event => {
            const eventElement = document.createElement('div');
            eventElement.className = `event-item ${event.priority}`;
            eventElement.textContent = event.title;
            eventElement.title = `${event.title} - ${formatTime(event.start)} to ${formatTime(event.end)}`;
            daySlot.appendChild(eventElement);
        });
        
        dayBody.appendChild(daySlot);
    }
}

function switchView(view) {
    currentView = view;
    
    // Update button states
    document.querySelectorAll('.btn-group .btn').forEach(btn => btn.classList.remove('active'));
    document.getElementById(view + 'ViewBtn').classList.add('active');
    
    // Show/hide views
    document.querySelectorAll('.calendar-view').forEach(view => view.style.display = 'none');
    document.getElementById(view + 'View').style.display = 'block';
    
    renderCalendar();
}

function previousPeriod() {
    if (currentView === 'month') {
        currentDate.setMonth(currentDate.getMonth() - 1);
    } else if (currentView === 'week') {
        currentDate.setDate(currentDate.getDate() - 7);
    } else if (currentView === 'day') {
        currentDate.setDate(currentDate.getDate() - 1);
    }
    renderCalendar();
}

function nextPeriod() {
    if (currentView === 'month') {
        currentDate.setMonth(currentDate.getMonth() + 1);
    } else if (currentView === 'week') {
        currentDate.setDate(currentDate.getDate() + 7);
    } else if (currentView === 'day') {
        currentDate.setDate(currentDate.getDate() + 1);
    }
    renderCalendar();
}

function goToToday() {
    currentDate = new Date();
    renderCalendar();
}

function selectDay(date) {
    currentDate = new Date(date);
    if (currentView === 'day') {
        renderCalendar();
    } else {
        switchView('day');
    }
}

function showEventModal() {
    document.getElementById('eventModalTitle').textContent = 'Create New Event';
    document.getElementById('eventForm').reset();
    
    // Set default dates
    const today = new Date();
    document.getElementById('eventStartDate').value = today.toISOString().split('T')[0];
    document.getElementById('eventEndDate').value = today.toISOString().split('T')[0];
    
    new bootstrap.Modal(document.getElementById('eventModal')).show();
}

function saveEvent() {
    const form = document.getElementById('eventForm');
    const formData = new FormData(form);
    
    // Create event object
    const event = {
        title: formData.get('title'),
        description: formData.get('description'),
        start_date: formData.get('start_date'),
        end_date: formData.get('end_date'),
        start_time: formData.get('start_time'),
        end_time: formData.get('end_time'),
        location: formData.get('location'),
        priority: formData.get('priority'),
        event_type: formData.get('event_type'),
        attendees: formData.get('attendees'),
        all_day: formData.get('all_day') === 'on',
        is_recurring: formData.get('is_recurring') === 'on',
        recurrence_type: formData.get('recurrence_type'),
        recurrence_end: formData.get('recurrence_end')
    };
    
    // Save to database via API
    fetch('/api/calendar', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        },
        body: JSON.stringify(event)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Close modal and refresh calendar
            bootstrap.Modal.getInstance(document.getElementById('eventModal')).hide();
            loadCalendarData();
        } else {
            alert('Error saving event: ' + data.message);
        }
    })
    .catch(error => {
        console.error('Error saving event:', error);
        alert('Error saving event');
    });
}

function loadUpcomingEvents() {
    const today = new Date();
    const upcoming = events.filter(event => event.start >= today).slice(0, 5);
    
    const container = document.getElementById('upcomingEvents');
    container.innerHTML = '';
    
    if (upcoming.length === 0) {
        container.innerHTML = '<p class="text-muted">No upcoming events</p>';
        return;
    }
    
    upcoming.forEach(event => {
        const eventElement = document.createElement('div');
        eventElement.className = 'd-flex justify-content-between align-items-center mb-3 p-3 border rounded shadow-sm';
        eventElement.style.borderLeft = `4px solid ${getPriorityColorHex(event.priority)}`;
        
        eventElement.innerHTML = `
            <div class="flex-grow-1">
                <h6 class="mb-1 fw-semibold">${event.title}</h6>
                <small class="text-muted">
                    <i class="bi bi-clock me-1"></i>${formatDateTime(event.start)}
                </small>
                ${event.location ? `<br><small class="text-muted"><i class="bi bi-geo-alt me-1"></i>${event.location}</small>` : ''}
            </div>
            <div class="text-end">
                <span class="badge bg-${getPriorityColor(event.priority)} fs-6">${event.priority.toUpperCase()}</span>
            </div>
        `;
        
        container.appendChild(eventElement);
    });
    
    // Update stats
    const todayEvents = events.filter(event => isSameDay(event.start, today)).length;
    const weekEvents = events.filter(event => {
        const weekStart = new Date(today);
        weekStart.setDate(today.getDate() - today.getDay());
        const weekEnd = new Date(weekStart);
        weekEnd.setDate(weekStart.getDate() + 6);
        return event.start >= weekStart && event.start <= weekEnd;
    }).length;
    
    document.getElementById('todayEventsCount').textContent = todayEvents;
    document.getElementById('weekEventsCount').textContent = weekEvents;
}

function showAnalytics() {
    new bootstrap.Modal(document.getElementById('analyticsModal')).show();
    loadAnalytics();
}

function loadAnalytics() {
    // In a real app, this would load analytics data
    document.getElementById('aiInsights').innerHTML = `
        <div class="alert alert-info">
            <h6>AI Insights</h6>
            <p>• You have 3 meetings scheduled this week - consider blocking focus time</p>
            <p>• Your most productive hours are 10-11 AM and 2-3 PM</p>
            <p>• Consider rescheduling the 4 PM meeting to avoid end-of-day fatigue</p>
        </div>
    `;
}

function refreshCalendar() {
    loadCalendarData();
    renderCalendar();
    loadUpcomingEvents();
}

function connectGoogleCalendar() {
    window.location.href = '/calendar/google/connect';
}

function syncGoogleCalendar() {
    fetch('/calendar/google/sync', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('Google Calendar synced successfully! ' + data.message);
            loadCalendarData();
        } else {
            alert('Error syncing Google Calendar: ' + data.message);
        }
    })
    .catch(error => {
        console.error('Error syncing Google Calendar:', error);
        alert('Error syncing Google Calendar');
    });
}

function checkGoogleCalendarStatus() {
    // Check if user has Google Calendar connected
    fetch('/api/user/google-calendar-status')
        .then(response => response.json())
        .then(data => {
            if (data.connected) {
                document.getElementById('googleConnectBtn').style.display = 'none';
                document.getElementById('googleSyncBtn').style.display = 'inline-block';
            } else {
                document.getElementById('googleConnectBtn').style.display = 'inline-block';
                document.getElementById('googleSyncBtn').style.display = 'none';
            }
        })
        .catch(error => {
            console.error('Error checking Google Calendar status:', error);
        });
}

// Utility functions
function isToday(date) {
    const today = new Date();
    return date.toDateString() === today.toDateString();
}

function isSameDay(date1, date2) {
    return date1.toDateString() === date2.toDateString();
}

function formatHour(hour) {
    if (hour === 0) return '12 AM';
    if (hour < 12) return `${hour} AM`;
    if (hour === 12) return '12 PM';
    return `${hour - 12} PM`;
}

function formatTime(date) {
    return date.toLocaleTimeString('en-US', { 
        hour: 'numeric', 
        minute: '2-digit',
        hour12: true 
    });
}

function formatDateTime(date) {
    return date.toLocaleDateString('en-US', { 
        month: 'short', 
        day: 'numeric',
        hour: 'numeric', 
        minute: '2-digit',
        hour12: true 
    });
}

function getPriorityColor(priority) {
    const colors = {
        'urgent': 'danger',
        'high': 'warning',
        'normal': 'success',
        'low': 'secondary'
    };
    return colors[priority] || 'secondary';
}

function getPriorityColorHex(priority) {
    const colors = {
        'urgent': '#dc3545',
        'high': '#fd7e14',
        'normal': '#198754',
        'low': '#6c757d'
    };
    return colors[priority] || '#6c757d';
}
</script>
@endsection
